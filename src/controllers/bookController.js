const Book = require('../models/Book');

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏
const getBooks = async (req, res) => {
  try {
    const books = await Book.find();
    res.status(200).json(books);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥' });
  }
};

// –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É
const addBook = async (req, res) => {
  console.log('üì© –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', req.body); // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  console.log('üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.user); // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  const { title, author, description } = req.body;
  if (!title || !author || !description) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
    return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const book = new Book({ title, author, description });
    await book.save();
    console.log('‚úÖ –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', book);
    res.status(201).json(book);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏' });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É
const updateBook = async (req, res) => {
  const { id } = req.params;
  const { title, author, description } = req.body;

  console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ (ID: ${id}):`, req.body);

  try {
    const book = await Book.findByIdAndUpdate(id, { title, author, description }, { new: true });
    if (!book) {
      console.warn(`‚ö†Ô∏è –ö–Ω–∏–≥–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return res.status(404).json({ message: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    console.log('‚úÖ –ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', book);
    res.json(book);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏' });
  }
};

// –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É
const deleteBook = async (req, res) => {
  const { id } = req.params;
  
  console.log(`üóë –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ (ID: ${id})`);

  try {
    const book = await Book.findByIdAndDelete(id);
    if (!book) {
      console.warn(`‚ö†Ô∏è –ö–Ω–∏–≥–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return res.status(404).json({ message: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    console.log('‚úÖ –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞:', book);
    res.json({ message: '–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏' });
  }
};

module.exports = { getBooks, addBook, updateBook, deleteBook };
